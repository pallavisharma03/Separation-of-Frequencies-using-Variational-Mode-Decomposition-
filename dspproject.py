# -*- coding: utf-8 -*-
"""DSPproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-AdOah2pndJWkYEJy-w1iM8KexqCcBkF
"""

pip install vmdpy

import numpy as np
import matplotlib.pyplot as plt
from vmdpy import VMD
from IPython.display import Audio

T = 20000
fs = 1/T
t = np.arange(1,T+1)/T
Ts = t[2]-t[1]
rate = 1/Ts

# enter center frequencies of components
f_1 = int(input("Enter frequency 1 - "))
f_2 = int(input("Enter frequency 2 - "))
f_3 = int(input("Enter frequency 3 - "))

v_1 = (np.cos(2*np.pi*f_1*t))
Audio(data = v_1 , rate = rate)

v_2 = (np.cos(2*np.pi*f_2*t))
Audio(data = v_2 , rate = rate)

v_3 = (np.cos(2*np.pi*f_3*t))
Audio(data = v_3 , rate = rate)

_# adding them all
#n = len(t)
v = v_1 + v_2 + v_3 + 0.1*np.random.random()
Audio(data = v , rate = rate)

#f_hat = np.fft.fftshift((np.fft.fft(f)))
#. some sample parameters for VMD
alpha = 5000      # moderate bandwidth constraint
tau = 0           # noise-tolerance (no strict fidelity enforcement)
K = 3             # 3 modes
DC = 0             # no DC part imposed
init = 1           # initialize omegas uniformly
tol = 1e-7

#. Run actual VMD code
u, u_hat, omega = VMD(v, alpha, tau, K, DC, init, tol)

Audio(data = u[0], rate = rate)
#plt.plot(u[0])
#plt.figure()

Audio(data = u[1] , rate = rate)
#plt.plot(u[1])
#plt.figure()

Audio(data = u[2] , rate = rate)
#plt.plot(u[2])
#plt.figure()

omega[-1]/fs